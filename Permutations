// This code generates all possible permutations of a list of elements for example
// [1,2] = (1,2) & (2,1)
// [1,2,3] = [1, 2, 3] & [1, 3, 2] & [2, 1, 3] & [2, 3, 1] & [3, 1, 2] & [3, 2, 1]

package main

import "fmt"

// iterates over all permutations without generating them all first
func nextPerm(p []int) {
    for i := len(p) - 1; i >= 0; i-- {
        if i == 0 || p[i] < len(p)-i-1 {
            p[i]++
            return
        }
        p[i] = 0 //resets the first element of array to 0 so it can iterate in an ascending order
    }
}

func getPerm(orig, p []int) []int {
    result := append([]int{}, orig...)
    for i, v := range p {
        result[i], result[i+v] = result[i+v], result[i] // interchange the two values
    }
    return result
}

func main() {
    orig := []int{11, 22, 33}
    for p := make([]int, len(orig)); p[0] < len(p); nextPerm(p) {
        fmt.Println(getPerm(orig, p))
    }
}
